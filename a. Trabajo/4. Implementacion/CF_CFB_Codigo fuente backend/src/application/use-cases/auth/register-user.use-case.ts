import { IUserRepository } from "../../../domain/repositories/user.repository";
import { RegisterUserDto } from "../../dtos/auth.dtos";
import * as bcrypt from 'bcryptjs';
import { User } from "@prisma/client";
import { IEmailService } from "../../../domain/services/email.service";

export class RegisterUserUseCase {
  // Usamos inyección de dependencias para recibir el repositorio.
  // Esto mantiene el caso de uso desacoplado de la implementación de la base de datos.
  constructor(
    private readonly userRepository: IUserRepository,
    private readonly emailService: IEmailService 
    ) {}

  async execute(dto: RegisterUserDto): Promise<Omit<User, 'password_hash'>> {
    // 1. Validar si el usuario ya existe
    const existingUser = await this.userRepository.findByEmail(dto.email);
    if (existingUser) {
      throw new Error("El correo electrónico ya está en uso.");
    }
    
    // 2. Crear y Hashear la contraseña
        // 1. GENERAR UNA CONTRASEÑA ALEATORIA
        // Usaremos una combinación simple de los datos del usuario + un número aleatorio para que sea más predecible para el caso de uso del SRS.
        // Ej: "alperez21" (Dos primeras letras del nombre + Apellido + Edad del paciente)
        // Para simplificar, tomaremos las 2 primeras letras del nombre del representante y la edad del paciente.
    const namePart = dto.full_name.substring(0, 2).toLowerCase();
    const passwordBase = `${namePart}${dto.patient.age}`;
    const autoGeneratedPassword = `${passwordBase}${Math.floor(Math.random() * 90 + 10)}`; // ej: "ju2187"
    
    //console.log(`Contraseña autogenerada para ${dto.email}: ${autoGeneratedPassword}`); 
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    // 3. Crear el usuario usando el repositorio
    // Aquí el caso de uso no sabe si se está usando Prisma, TypeORM o cualquier otra cosa.
    const newUser = await this.userRepository.create({
      ...dto,
      password_hash: hashedPassword,
    });


    await this.emailService.sendWelcomeEmail(newUser.email, autoGeneratedPassword);


    return newUser;
  }
}