import { IUserRepository } from "../../../domain/repositories/user.repository";
import { ISpecialistRepository } from "../../../domain/repositories/specialist.repository";
import { IEmailService } from "../../../domain/services/email.service"; 
import { CreateSpecialistDto } from "../../dtos/specialist.dtos";
import * as bcrypt from 'bcryptjs';

export class CreateSpecialistUseCase {
  constructor(
    private readonly userRepository: IUserRepository,
    private readonly specialistRepository: ISpecialistRepository,
    private readonly emailService: IEmailService
  ) {}

  async execute(dto: CreateSpecialistDto) {
    // Reutilizamos el repositorio de usuarios para verificar duplicados
    const existingUser = await this.userRepository.findByEmail(dto.email);
    if (existingUser) {
      throw new Error("El correo electrónico ya está en uso.");
    }
    
    // Generamos una contraseña aleatoria, similar al registro de clientes
    const autoGeneratedPassword = `skipur${Math.random().toString(36).slice(-6)}`;
    const hashedPassword = await bcrypt.hash(autoGeneratedPassword, 10);

    const newSpecialist = await this.specialistRepository.create({
      ...dto,
      password_hash: hashedPassword,
    });
    
    await this.emailService.sendSpecialistWelcomeEmail(
      newSpecialist.email,
      newSpecialist.full_name,
      autoGeneratedPassword
    );

    return newSpecialist;

    
    
  }
}